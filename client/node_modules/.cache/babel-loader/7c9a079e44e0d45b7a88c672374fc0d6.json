{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { GOOGLE_SIGN_IN_START, EMAIL_SIGN_IN_START, CHECK_USER_SESSION, SIGN_OUT_START, SIGN_UP_START, SIGN_UP_SUCCESS } from '../actions/actions.type';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from '../actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../firebase/firebase.utils'; // asynchoronous generator functions\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get(); // on Sign In success, update Redux store with the user info\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signUpWithEmail({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  console.log(email, password, displayName);\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    console.log(user);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error.message));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* userSignOut() {\n  try {\n    yield auth.signOut();\n    const userAuth = yield getCurrentUser();\n    console.log(userAuth);\n    yield put(signOutSuccess(userAuth));\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n} //user sagas\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(SIGN_OUT_START, userSignOut);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(SIGN_UP_START, signUpWithEmail);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(SIGN_UP_SUCCESS, signInAfterSignUp);\n} //root saga\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/tuandinh/Documents/workspace/e-commerce/src/sagas/user.sagas.js"],"names":["takeLatest","put","all","call","GOOGLE_SIGN_IN_START","EMAIL_SIGN_IN_START","CHECK_USER_SESSION","SIGN_OUT_START","SIGN_UP_START","SIGN_UP_SUCCESS","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","user","signInWithPopup","console","log","signInWithEmail","payload","email","password","signInWithEmailAndPassword","signUpWithEmail","displayName","createUserWithEmailAndPassword","signInAfterSignUp","userSignOut","signOut","isUserAuthenticated","onGoogleSignInStart","onEmailSignInStart","onSignOutStart","onCheckUserSession","onSignUpStart","onSignUpSuccess","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport {\n  GOOGLE_SIGN_IN_START,\n  EMAIL_SIGN_IN_START,\n  CHECK_USER_SESSION,\n  SIGN_OUT_START,\n  SIGN_UP_START,\n  SIGN_UP_SUCCESS,\n} from '../actions/actions.type';\n\nimport {\n  signInSuccess,\n  signInFailure,\n  signOutSuccess,\n  signOutFailure,\n  signUpSuccess,\n  signUpFailure,\n} from '../actions';\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from '../firebase/firebase.utils';\n\n// asynchoronous generator functions\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(\n      createUserProfileDocument,\n      userAuth,\n      additionalData\n    );\n    const userSnapshot = yield userRef.get();\n    // on Sign In success, update Redux store with the user info\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signUpWithEmail({\n  payload: { email, password, displayName },\n}) {\n  console.log(email, password, displayName);\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n    console.log(user);\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\n  } catch (error) {\n    yield put(signUpFailure(error.message));\n  }\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* userSignOut() {\n  try {\n    yield auth.signOut();\n    const userAuth = yield getCurrentUser();\n    console.log(userAuth);\n    yield put(signOutSuccess(userAuth));\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\n//user sagas\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(SIGN_OUT_START, userSignOut);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignUpStart() {\n  yield takeLatest(SIGN_UP_START, signUpWithEmail);\n}\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\n//root saga\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onSignUpSuccess),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}