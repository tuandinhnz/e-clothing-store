{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyCV4JT4yoVsdSkhF3nKKBa9OXFH3q9qTjU',\n  authDomain: 'e-clothing-44e67.firebaseapp.com',\n  databaseURL: 'https://e-clothing-44e67.firebaseio.com',\n  projectId: 'e-clothing-44e67',\n  storageBucket: 'e-clothing-44e67.appspot.com',\n  messagingSenderId: '581284366396',\n  appId: '1:581284366396:web:bd3d0e0bdfb4072ac5db39',\n  measurementId: 'G-W2QP2MM9CV'\n}; // create a user in the Firestore database function with userAuth returned from Firebase Authentication\n\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\n  //checl if user is currently signed in.\n  if (!userAuth) return; //check if user is already exist in the Firestore database using user Auth object uid parameter\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n\n  if (!userSnapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...addtionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // to make sure all documents are added to the Firestore successfully, we need to add them to a batch. If the creating process fails halfway for some reasons, the whole batch will fail and we have to start the creating again. We don't want only half of the documents are added to Firestore.\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(`${obj.id}`);\n    batch.set(newDocRef, obj);\n  }); // for (let i=0; i < objectsToAdd.length; i++) {\n  //   const newDocRef = collectionRef.doc();\n  //   batch.set(newDocRef, objectsToAdd[i]);\n  // }\n\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); // convert the transformedCollections into an object using reduce method\n\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; // utils to check if user is signed in\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unscribe = auth.onAuthStateChanged(userAuth => {\n      unscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // Initialize Firebase\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/tuandinh/Documents/workspace/e-commerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","addtionalData","userRef","firestore","doc","uid","userSnapshot","get","exists","displayName","email","createAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","id","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: 'AIzaSyCV4JT4yoVsdSkhF3nKKBa9OXFH3q9qTjU',\n  authDomain: 'e-clothing-44e67.firebaseapp.com',\n  databaseURL: 'https://e-clothing-44e67.firebaseio.com',\n  projectId: 'e-clothing-44e67',\n  storageBucket: 'e-clothing-44e67.appspot.com',\n  messagingSenderId: '581284366396',\n  appId: '1:581284366396:web:bd3d0e0bdfb4072ac5db39',\n  measurementId: 'G-W2QP2MM9CV',\n};\n// create a user in the Firestore database function with userAuth returned from Firebase Authentication\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\n  //checl if user is currently signed in.\n  if (!userAuth) return;\n  //check if user is already exist in the Firestore database using user Auth object uid parameter\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n  if (!userSnapshot.exists) {\n    const { displayName, email } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...addtionalData,\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  // to make sure all documents are added to the Firestore successfully, we need to add them to a batch. If the creating process fails halfway for some reasons, the whole batch will fail and we have to start the creating again. We don't want only half of the documents are added to Firestore.\n  const batch = firestore.batch();\n\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc(`${obj.id}`);\n    batch.set(newDocRef, obj);\n  });\n\n  // for (let i=0; i < objectsToAdd.length; i++) {\n  //   const newDocRef = collectionRef.doc();\n  //   batch.set(newDocRef, objectsToAdd[i]);\n  // }\n\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollections = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n  // convert the transformedCollections into an object using reduce method\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\n// utils to check if user is signed in\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unscribe = auth.onAuthStateChanged((userAuth) => {\n      unscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}