{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { GOOGLE_SIGN_IN_START, EMAIL_SIGN_IN_START, CHECK_USER_SESSION } from '../actions/actions.type';\nimport { signInSuccess, signInFailure } from '../actions';\nimport { auth, googleProvider, createUserProfileDocument } from '../firebase/firebase.utils';\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {} catch (error) {}\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/tuandinh/Documents/workspace/e-commerce/src/sagas/user.sagas.js"],"names":["takeLatest","put","all","call","GOOGLE_SIGN_IN_START","EMAIL_SIGN_IN_START","CHECK_USER_SESSION","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","user","signInWithPopup","console","log","isUserAuthenticated","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","onEmailSignInStart","onCheckUserSession","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SACEC,oBADF,EAEEC,mBAFF,EAGEC,kBAHF,QAIO,yBAJP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,YAA7C;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,4BAJP;;AAMA,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC1C,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACQ,yBAAD,EAA4BE,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CAACM,aAAa,CAAC;AAAEU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACO,aAAa,CAACW,KAAK,CAACC,OAAP,CAAd,CAAT;AACD;AACF;;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,eAAL,CAAqBb,cAArB,CAAvB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,UAAMV,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAJD,CAIE,OAAOH,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACO,aAAa,CAACW,KAAK,CAACC,OAAP,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUM,mBAAV,GAAgC;AACrC,MAAI,CACH,CADD,CACE,OAAOP,KAAP,EAAc,CAAE;AACnB;AAED,OAAO,UAAUQ,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAER,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,UAAMV,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAJD,CAIE,OAAOH,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACO,aAAa,CAACW,KAAK,CAACC,OAAP,CAAd,CAAT;AACD;AACF;AACD,OAAO,UAAUY,mBAAV,GAAgC;AACrC,QAAMhC,UAAU,CAACI,oBAAD,EAAuBiB,gBAAvB,CAAhB;AACD;AAED,OAAO,UAAUY,kBAAV,GAA+B;AACpC,QAAMjC,UAAU,CAACK,mBAAD,EAAsBsB,eAAtB,CAAhB;AACD;AAED,OAAO,UAAUO,kBAAV,GAA+B;AACpC,QAAMlC,UAAU,CAACM,kBAAD,EAAqBoB,mBAArB,CAAhB;AACD;AAED,OAAO,UAAUS,SAAV,GAAsB;AAC3B,QAAMjC,GAAG,CAAC,CAACC,IAAI,CAAC6B,mBAAD,CAAL,EAA4B7B,IAAI,CAAC8B,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport {\n  GOOGLE_SIGN_IN_START,\n  EMAIL_SIGN_IN_START,\n  CHECK_USER_SESSION,\n} from '../actions/actions.type';\n\nimport { signInSuccess, signInFailure } from '../actions';\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n} from '../firebase/firebase.utils';\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n  } catch (error) {}\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    console.log(user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}